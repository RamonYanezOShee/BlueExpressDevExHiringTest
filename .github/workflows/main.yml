name: Test, Build, and Deploy to ECR

on:
 
  push:
    branches: 
      - "ramonyanez"

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  REPOSITORY: ${{ vars.REPOSITORY }}
  EKS_CLUSTER: ${{ vars.EKS_CLUSTER }}   

jobs:
  
  buildAndTest:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: 'npm'
      - run: npm ci
      - run: npm run build --if-present
      - run: npm test

  createDockerImageAndPush:

    needs: buildAndTest
    
    name: Build Docker Image and push it to ECR
    runs-on: ubuntu-latest

    steps:

    - name: Check out repo
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      # with:
      #   role-to-assume: arn:aws:iam::486914095721:role/ecr_push_role
      #   aws-region: ap-southeast-2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ env.REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        echo "image=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT


  deploy:

    needs: createDockerImageAndPush

    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Generate kubeconfig
      id: cluster-config
      run: aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{env.EKS_CLUSTER }}

    - name: Deploy to cluster
      id: cluster-deploy
      env:
        IMAGE_TAG: ${{ github.sha }}
        DEPLOYMENT_FILE: "k8s/deployment.yaml"
      run: |
        echo "El sha de github deberia ser: $IMAGE_TAG"
        ls
        cat k8s/deployment.yaml
        sed -i "s@<IMAGE_TAG>@$IMAGE_TAG@" k8s/deployment.yaml
        kubectl apply -f k8s/deployment.yaml